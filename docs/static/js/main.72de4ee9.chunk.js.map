{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAAqB,EAEZC,mBAAS,IAFG,mBAEzCC,EAFyC,KAE7BC,EAF6B,KAiBhD,OAEI,uBAAMC,SAXW,SAACC,GAClBA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACvCN,EAAc,MAMlB,cACI,uBACAO,KAAK,OACLC,MAAQT,EACRU,SAnBkB,SAACP,GAC3BF,EAAcE,EAAEQ,OAAOF,c,+BCPdG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAELC,EAFK,iDAE4CC,UAAUH,GAFtD,+DAGQI,MAAOF,GAHf,cAGLG,EAHK,gBAIYA,EAAKC,OAJjB,uBAIHC,EAJG,EAIHA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAV/B,kBAiBJM,GAjBI,4CAAH,sDCCPO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAErC,OACI,sBAAKc,UAAU,6CAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,kCAAMA,EAAN,WCHCO,EAAU,SAAC,GAAoB,IAAjBnB,EAAgB,EAAhBA,SAAgB,ECDf,SAAEA,GAAe,IAAD,EAEdd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAuBxC,OAhBAC,qBAAW,WAEPxB,EAASC,GACRwB,MAAM,SAAAC,GAEHC,YAAY,WACRJ,EAAS,CACTf,KAAMkB,EACNL,SAAQ,MAEb,UAIJ,CAAEpB,IAEEqB,EDpB0BM,CAAc3B,GAAlCa,EAF0B,EAE/BN,KAAaa,EAFkB,EAElBA,QAUrB,OACI,qCACA,qBAAIJ,UAAU,wCAAd,cAAyDhB,EAAzD,OAEEoB,GAAW,mBAAGJ,UAAU,qDAAb,0BAEb,qBAAKA,UAAU,YAAf,SAEYH,EAAOJ,KAAK,SAAAC,GAAG,OACf,cAAC,EAAD,eAESA,GADCA,EAAIC,aEtBrBiB,EAAe,WAAO,IAAD,EAEM1C,mBAAS,CAAC,QAFhB,mBAEvB2C,EAFuB,KAEX5C,EAFW,KAU9B,OAEI,gCACI,kDACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAEA,6BAEQ4C,EAAWpB,KAAK,SAAAT,GAAQ,OACxB,cAAC,EAAD,CAEAA,SAAWA,GADLA,Y,MCpB1B8B,IAASC,OACL,cAAE,EAAF,IACFC,SAASC,eAAe,W","file":"static/js/main.72de4ee9.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from \"prop-types\"\r\n\r\nexport const AddCategory = ( { setCategories } ) => {\r\n\r\n    const [inputValue, setInputValue] = useState(\"\") //Poner las comillas, para que no sea un undefined.\r\n\r\n    const handleInputChange = (e) => {\r\n    setInputValue(e.target.value) \r\n    } //La \"e\" es el evento almacenado (input).\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault(); //Para que no se recargue la pág.\r\n\r\n        if ( inputValue.trim().length > 2) {\r\n            setCategories( cats => [inputValue, ...cats] );\r\n            setInputValue(\"\");\r\n        }\r\n    }\r\n\r\n    return (\r\n\r\n        <form onSubmit={ handleSubmit }> {/* Si existe un agrupador (form), el div ya no es necesario. //Enter=Se activa. */}\r\n            <input\r\n            type=\"text\"\r\n            value={ inputValue }\r\n            onChange={ handleInputChange } //Se activa el método al existir un cambio. \r\n            />\r\n        </form>\r\n\r\n    ) \r\n\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","//Aquí es para traer nuestros gifs. Nos regresará esa categoría.\r\nexport const getGifs = async(category) => {\r\n    // Aquí se hace la petición HTTP, trae los gifs, los procesa y los retorna.\r\n            const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=TlXYXyulB1TS5MmHQsrWvZQvEif7Nl9Z`;\r\n            const resp = await fetch( url );\r\n            const { data } = await resp.json(); //Se obtiene datos en formato Json.\r\n    \r\n            const gifs = data.map( img => { //Con el map, hace que se recorra la data (En la data hay 10 propiedades)\r\n                return {\r\n                    id: img.id,\r\n                    title: img.title,\r\n                    url: img.images?.downsized_medium.url //La ? es por el operador ternario.\r\n                }\r\n            })\r\n    \r\n            //console.log( \"Data en general: \", data );\r\n            //console.log( \"Gifs ordenados: \", gifs );\r\n    \r\n            return gifs;\r\n    \r\n        }","import React from 'react'\r\n\r\nexport const GifGridItem = ({ id, title, url }) => {\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__zoomInDown\">\r\n            <img src={ url } alt={ title }/>\r\n            <p> { title } </p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ( { category } ) => {\r\n\r\n    const { data:images, loading } = useFetchGifs( category );\r\n\r\n/*  \r\n\r\n    useEffect( () => { //Sólo se disparará 1 vez, si no se encuentra alguna dependencia [].\r\n        getGifs( category )\r\n        .then( imgs => setImages( imgs ) )\r\n    }, [ category ] ); //El useEffect ejecuta la instrucción (getgifs) nada más cuando el comp se renderiza por 1 vez.\r\n*/\r\n\r\n    return ( \r\n        <>\r\n        <h3 className=\"animate__animated animate__backInDown\"> { category } </h3> \r\n\r\n        { loading && <p className=\"animate__animated animate__flash animate__delay-1s\"> Loading... </p> }\r\n\r\n        <div className=\"card-grid\">     \r\n                {\r\n                    images.map( img => (\r\n                    <GifGridItem\r\n                        key={ img.id }\r\n                        { ...img }\r\n                        />\r\n                    ))\r\n                }                             \r\n            </div> \r\n        </>\r\n    )\r\n}","import { useState, useEffect } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () => {\r\n\r\n        getGifs( category )\r\n        .then( imgs => {\r\n\r\n            setTimeout( () => {\r\n                setstate({\r\n                data: imgs,\r\n                loading:false\r\n            });\r\n        }, 2000);\r\n\r\n        });\r\n\r\n    }, [ category ] )\r\n\r\n    return state;\r\n\r\n}","import React, { useState } from \"react\";\r\nimport { AddCategory } from \"./components/AddCategory\";\r\nimport { GifGrid } from \"./components/GifGrid\";\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState([\"HxH\"]);\r\n\r\n    /*const handleAdd = () => {\r\n        setCategories( [...categories, \"HxH\"] ) \r\n        setCategories( categ => [...categ, \"HxH\"] )\r\n    }\r\n    */\r\n\r\n    return (\r\n\r\n        <div>\r\n            <h2> Gif Expert App </h2>\r\n            <AddCategory setCategories={ setCategories }/>\r\n            <hr/>\r\n\r\n            <ol>\r\n                {\r\n                    categories.map( category => \r\n                    <GifGrid \r\n                    key={ category }\r\n                    category={ category } />\r\n                        )\r\n                }\r\n            </ol>\r\n\r\n        </div>\r\n\r\n    )\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    < GifExpertApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}